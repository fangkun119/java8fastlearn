import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.nio.file.*;
import java.util.Collections;
import java.util.List;

public class FilesDemo {
    private static final String ROOT_DIR = "./code/ch9/sec02/";
    private static final String LOG_PREFIX = "\t// ";

    private static Path demoJavaPath() {
        return Paths.get(ROOT_DIR,"FilesDemo.java");
    }

    private static Path demo1OutPath() {
        return Paths.get(ROOT_DIR,"FilesDemo1.out");
    }

    private static Path demo2OutPath() {
        return Paths.get(ROOT_DIR,"FilesDemo2.out");
    }

    public static void main(String[] args) throws IOException {
        // 读取全部内容：Files.readAllBytes(Path)
        byte[] bytes = Files.readAllBytes(demoJavaPath());
        String content = new String(bytes, StandardCharsets.UTF_8);
        System.out.println(LOG_PREFIX + content.substring(0, 100) + "...");

        List<String> lines = Files.readAllLines(demoJavaPath());
        System.out.println("Last line: " + lines.get(lines.size() - 1));

        content = content.replaceAll("e", "x");
        Files.write(demo1OutPath(), content.getBytes(StandardCharsets.UTF_8));

        Files.write(demo2OutPath(), lines);

        Collections.reverse(lines);
        Files.write(demo2OutPath(), lines, StandardOpenOption.APPEND);

        URL url = new URL("http://horstmann.com");

        boolean deleted = Files.deleteIfExists(Paths.get("FilesDemo3.out"));
        System.out.println(deleted);

        Files.copy(url.openStream(), Paths.get("FilesDemo3.out"));
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        Files.copy(Paths.get("FilesDemo3.out"), out);
        System.out.println(out.toString("UTF-8").substring(0, 100) + "...");

        Files.copy(Paths.get("FilesDemo3.out"), Paths.get("FilesDemo4.out"));
        Files.move(Paths.get("FilesDemo4.out"), Paths.get("FilesDemo5.out"));
        Files.copy(Paths.get("FilesDemo3.out"), Paths.get("FilesDemo5.out"),
                StandardCopyOption.REPLACE_EXISTING,
                StandardCopyOption.COPY_ATTRIBUTES);
        Files.move(Paths.get("FilesDemo5.out"), Paths.get("FilesDemo6.out"),
                StandardCopyOption.ATOMIC_MOVE);
        Files.delete(Paths.get("FilesDemo6.out"));

        Path newPath = Files.createTempFile(null, ".txt");
        System.out.println(newPath);

        newPath = Files.createTempDirectory("fred");
        System.out.println(newPath);
    }
}
}
    }
        System.out.println(newPath);
        newPath = Files.createTempDirectory("fred");

        System.out.println(newPath);
        Path newPath = Files.createTempFile(null, ".txt");

        Files.delete(Paths.get("FilesDemo6.out"));
                StandardCopyOption.ATOMIC_MOVE);
        Files.move(Paths.get("FilesDemo5.out"), Paths.get("FilesDemo6.out"),
                StandardCopyOption.COPY_ATTRIBUTES);
                StandardCopyOption.REPLACE_EXISTING,
        Files.copy(Paths.get("FilesDemo3.out"), Paths.get("FilesDemo5.out"),
        Files.move(Paths.get("FilesDemo4.out"), Paths.get("FilesDemo5.out"));
        Files.copy(Paths.get("FilesDemo3.out"), Paths.get("FilesDemo4.out"));

        System.out.println(out.toString("UTF-8").substring(0, 100) + "...");
        Files.copy(Paths.get("FilesDemo3.out"), out);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        Files.copy(url.openStream(), Paths.get("FilesDemo3.out"));

        System.out.println(deleted);
        boolean deleted = Files.deleteIfExists(Paths.get("FilesDemo3.out"));

        URL url = new URL("http://horstmann.com");

        Files.write(demo2OutPath(), lines, StandardOpenOption.APPEND);
        Collections.reverse(lines);

        Files.write(demo2OutPath(), lines);

        Files.write(demo1OutPath(), content.getBytes(StandardCharsets.UTF_8));
        content = content.replaceAll("e", "x");

        System.out.println("Last line: " + lines.get(lines.size() - 1));
        List<String> lines = Files.readAllLines(demoJavaPath());

        System.out.println(LOG_PREFIX + content.substring(0, 100) + "...");
        String content = new String(bytes, StandardCharsets.UTF_8);
        byte[] bytes = Files.readAllBytes(demoJavaPath());
        // 读取全部内容：Files.readAllBytes(Path)
    public static void main(String[] args) throws IOException {

    }
        return Paths.get(ROOT_DIR,"FilesDemo2.out");
    private static Path demo2OutPath() {

    }
        return Paths.get(ROOT_DIR,"FilesDemo1.out");
    private static Path demo1OutPath() {

    }
        return Paths.get(ROOT_DIR,"FilesDemo.java");
    private static Path demoJavaPath() {

    private static final String LOG_PREFIX = "\t// ";
    private static final String ROOT_DIR = "./code/ch9/sec02/";
public class FilesDemo {

import java.util.List;
import java.util.Collections;
import java.nio.file.*;
import java.nio.charset.StandardCharsets;
import java.net.URL;
import java.io.IOException;
import java.io.ByteArrayOutputStream;
}
    }
        System.out.println(newPath);
        newPath = Files.createTempDirectory("fred");

        System.out.println(newPath);
        Path newPath = Files.createTempFile(null, ".txt");

        Files.delete(Paths.get("FilesDemo6.out"));
                StandardCopyOption.ATOMIC_MOVE);
        Files.move(Paths.get("FilesDemo5.out"), Paths.get("FilesDemo6.out"),
                StandardCopyOption.COPY_ATTRIBUTES);
                StandardCopyOption.REPLACE_EXISTING,
        Files.copy(Paths.get("FilesDemo3.out"), Paths.get("FilesDemo5.out"),
        Files.move(Paths.get("FilesDemo4.out"), Paths.get("FilesDemo5.out"));
        Files.copy(Paths.get("FilesDemo3.out"), Paths.get("FilesDemo4.out"));

        System.out.println(out.toString("UTF-8").substring(0, 100) + "...");
        Files.copy(Paths.get("FilesDemo3.out"), out);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        Files.copy(url.openStream(), Paths.get("FilesDemo3.out"));

        System.out.println(deleted);
        boolean deleted = Files.deleteIfExists(Paths.get("FilesDemo3.out"));

        URL url = new URL("http://horstmann.com");

        Files.write(demo2OutPath(), lines, StandardOpenOption.APPEND);
        Collections.reverse(lines);

        //
        // 写入到文件中的内容
        // Files.write(demo2OutPath(), lines);
        Files.write(demo1OutPath(), content.getBytes(StandardCharsets.UTF_8));
        content = content.replaceAll("e", "x");
        // 按行写入内容

        // Last line: }
        // 输出
        System.out.println(NEW_LOG_PREFIX + "Last line: " + lines.get(lines.size() - 1));
        List<String> lines = Files.readAllLines(demoJavaPath());
        // 按行读取内容

        // import java.n...
        // import java.net.URL;
        // import java.io.IOException;
        // import java.io.ByteArrayOutputStream;
        // 输出
        System.out.println(NEW_LOG_PREFIX + content.substring(0, 100) + "...");
        String content = new String(bytes, StandardCharsets.UTF_8);
        byte[] bytes = Files.readAllBytes(demoJavaPath());
        // 读取全部内容：Files.readAllBytes(Path)
    public static void main(String[] args) throws IOException {

    }
        return Paths.get(ROOT_DIR,"FilesDemo2.out");
    private static Path demo2OutPath() {

    }
        return Paths.get(ROOT_DIR,"FilesDemo1.out");
    private static Path demo1OutPath() {

    }
        return Paths.get(ROOT_DIR,"FilesDemo.java");
    private static Path demoJavaPath() {

    private static final String NEW_LOG_PREFIX = "\n\t// ";
    private static final String ROOT_DIR = "./code/ch9/sec02/";
public class FilesDemo {

import java.util.List;
import java.util.Collections;
import java.nio.file.*;
import java.nio.charset.StandardCharsets;
import java.net.URL;
import java.io.IOException;
import java.io.ByteArrayOutputStream;
}
    }
        System.out.println(newPath);
        newPath = Files.createTempDirectory("fred");

        System.out.println(newPath);
        Path newPath = Files.createTempFile(null, ".txt");

        Files.delete(Paths.get("FilesDemo6.out"));
                StandardCopyOption.ATOMIC_MOVE);
        Files.move(Paths.get("FilesDemo5.out"), Paths.get("FilesDemo6.out"),
                StandardCopyOption.COPY_ATTRIBUTES);
                StandardCopyOption.REPLACE_EXISTING,
        Files.copy(Paths.get("FilesDemo3.out"), Paths.get("FilesDemo5.out"),
        Files.move(Paths.get("FilesDemo4.out"), Paths.get("FilesDemo5.out"));
        Files.copy(Paths.get("FilesDemo3.out"), Paths.get("FilesDemo4.out"));

        System.out.println(NEW_LOG_PREFIX + out.toString("UTF-8").substring(0, 100) + "...");
        Files.copy(filePath("FilesDemo3.out"), out);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        // 拷贝文件到OutputStream：Path → ByteArrayOutputStream

        Files.copy(url.openStream(), filePath("FilesDemo3.out"));
        URL url = new URL("http://horstmann.com");
        // 拷贝网页到文件：URL → InputStream → Path
         */
         * 2. 对于大文件，或二进制文件，可以考虑使用InputStream/OutputStream或者Reader/Writer
        /**

        System.out.println(NEW_LOG_PREFIX + deleted);
        boolean deleted = Files.deleteIfExists(filePath("FilesDemo3.out"));
        // 如果存在则删除文件：Files.deleteIfExists(Path)

        Files.write(filePath("FilesDemo2.out"), lines, StandardOpenOption.APPEND);
        Collections.reverse(lines);
        // 以追加的方式写入：File.write(Path, List<String>, StandardOpenOption.APPEND)

        Files.write(filePath("FilesDemo1.out"), lines);
        Files.write(filePath("FilesDemo1.out"), content.getBytes(StandardCharsets.UTF_8));
        content = content.replaceAll("e", "x");
        // 按行覆盖写入：Files.write(Path, List<String>)
        // 以二进制方式覆盖写入（可指定编码）：Files.write(Path, byte[])

        // Last line: }
        // 输出
        System.out.println(NEW_LOG_PREFIX + "Last line: " + lines.get(lines.size() - 1));
        List<String> lines = Files.readAllLines(filePath("FilesDemo.java"));
        // 按行读取内容

        // import java.n...
        // import java.net.URL;
        // import java.io.IOException;
        // import java.io.ByteArrayOutputStream;
        // 输出
        System.out.println(NEW_LOG_PREFIX + content.substring(0, 100) + "...");
        String content = new String(bytes, StandardCharsets.UTF_8);
        // 将byte[]转换为String（可指定编码）：new String(bytes, Charset)
        byte[] bytes = Files.readAllBytes(filePath("FilesDemo.java"));
        // 读取全部内容：Files.readAllBytes(Path)

         */
         * 1. 对于小文件，可以将文件内容当做字符串或字符串列表来处理
        /*****
    public static void main(String[] args) throws IOException {

    }
        return Paths.get("./code/ch9/sec02/", fileName);
    private static Path filePath(String fileName) {

    private static final String NEW_LOG_PREFIX = "\n\t// ";
public class FilesDemo {

import java.util.List;
import java.util.Collections;
import java.nio.file.*;
import java.nio.charset.StandardCharsets;
import java.net.URL;
import java.io.IOException;
import java.io.ByteArrayOutputStream;
}
    }
        System.out.println(NEW_LOG_PREFIX + isDeleted);
        boolean isDeleted = Files.deleteIfExists(filePath("FilesDemo6.out"));
        // 仅在文件存在时删除：Files.deleteIfExists(Path)

        Files.delete(filePath("FilesDemo6.out"));
        // 删除文件：Files.delete(Path)

                StandardCopyOption.ATOMIC_MOVE);
                filePath("FilesDemo5.out"), filePath("FilesDemo6.out"),
        Files.move(
        // 原子移动文件、要么移动完成、要么源文件仍然存在：StandardCopyOption.ATOMIC_MOVE

                StandardCopyOption.COPY_ATTRIBUTES);
                StandardCopyOption.REPLACE_EXISTING,
                filePath("FilesDemo3.out"), filePath("FilesDemo5.out"),
        Files.copy(
        // 拷贝设置（1）覆盖已存在文件StandardCopyOption.REPLACE_EXISTING (2) 拷贝文件属性StandardCopyOption.COPY_ATTRIBUTES

                filePath("FilesDemo4.out"), filePath("FilesDemo5.out"));
        Files.move(
        // 从Path移动到Path：Files.move(Path, Path)

                filePath("FilesDemo3.out"), filePath("FilesDemo4.out"));
        Files.copy(
        // 从Path拷贝到Path: Files.copy(Path, Path)

         */
         * 4. 复制、移动、和删除文件
        /**

        // /var/folders/nb/n2wl0lms2g57q00_t5qd2nsc0000gn/T/fred16143100884822648692
        System.out.println(NEW_LOG_PREFIX + newPath);
        newPath = Files.createTempDirectory("fred");

        // /var/folders/nb/n2wl0lms2g57q00_t5qd2nsc0000gn/T/14595181751598492480.txt
        System.out.println(NEW_LOG_PREFIX + newPath);
        Path newPath = Files.createTempFile(null, ".txt");

        // Files.createTempFile(     prefix        );
        // Files.createTempFile(dir, prefix        );
        // Files.createTempFile(     prefix, suffix);
        // Files.createTempFile(dir, prefix, suffix);
        // 创建临时文件


        Files.deleteIfExists(tmpPath);
        // 产出文件或目录

        System.out.println(NEW_LOG_PREFIX + isExists);
        boolean isExists = Files.exists(tmpPath);
        // 检查文件/目录是否存在

        System.out.println(NEW_LOG_PREFIX + tmpPath.toAbsolutePath().toString());
        Path tmpPath = Files.createDirectory(Paths.get("tmp"));
        // 创建新的目录

         */
         * 创建文件和目录
        /**

        // </head><bod...
        // <title>302 Found</title>
        // <html><head>
        // <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
        System.out.println(NEW_LOG_PREFIX + out.toString("UTF-8").substring(0, 100) + "...");
        Files.copy(filePath("FilesDemo3.out"), out);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        // 从Path拷贝到OutputStream：Files.copy(Path, OutputStream)

        Files.copy(url.openStream(), filePath("FilesDemo3.out"));
        URL url = new URL("http://horstmann.com");
        // 从InputStream拷贝到Path：Files.copy(InputStream, Path)
         */
         *   Writer writer    = Files.newBufferedWriter(path);
         *   Reader reader    = Files.newBufferedReader(path);
         *   OutputStream out = Files.newOutputStream(path);
         *   InputStream in   = Files.newInputStream(path);
         * 2.对于大文件，或二进制文件，可以考虑使用InputStream/OutputStream或者Reader/Writer
        /**

        System.out.println(NEW_LOG_PREFIX + deleted);
        boolean deleted = Files.deleteIfExists(filePath("FilesDemo3.out"));
        // 如果存在则删除文件：Files.deleteIfExists(Path)

        Files.write(filePath("FilesDemo2.out"), lines, StandardOpenOption.APPEND);
        Collections.reverse(lines);
        // 以追加的方式写入：File.write(Path, List<String>, StandardOpenOption.APPEND)

        Files.write(filePath("FilesDemo1.out"), lines);
        Files.write(filePath("FilesDemo1.out"), content.getBytes(StandardCharsets.UTF_8));
        content = content.replaceAll("e", "x");
        // 按行覆盖写入：Files.write(Path, List<String>)
        // 以二进制方式覆盖写入（可指定编码）：Files.write(Path, byte[])

        // Last line: }
        // 输出
        System.out.println(NEW_LOG_PREFIX + "Last line: " + lines.get(lines.size() - 1));
        List<String> lines = Files.readAllLines(filePath("FilesDemo.java"));
        // 按行读取内容

        // import java.n...
        // import java.net.URL;
        // import java.io.IOException;
        // import java.io.ByteArrayOutputStream;
        // 输出
        System.out.println(NEW_LOG_PREFIX + content.substring(0, 100) + "...");
        String content = new String(bytes, StandardCharsets.UTF_8);
        // 将byte[]转换为String（可指定编码）：new String(bytes, Charset)
        byte[] bytes = Files.readAllBytes(filePath("FilesDemo.java"));
        // 读取全部内容：Files.readAllBytes(Path)

         */
         * 1. 对于小文件，可以将文件内容当做字符串或字符串列表来处理
        /*****
    public static void main(String[] args) throws IOException {

    }
        return Paths.get("./code/ch9/sec02/", fileName);
    private static Path filePath(String fileName) {

    private static final String NEW_LOG_PREFIX = "\n\t// ";
public class FilesDemo {

import java.util.List;
import java.util.Collections;
import java.nio.file.*;
import java.nio.charset.StandardCharsets;
import java.net.URL;
import java.io.IOException;
import java.io.ByteArrayOutputStream;
}
    }
        System.out.println(NEW_LOG_PREFIX + isDeleted);
        boolean isDeleted = Files.deleteIfExists(filePath("FilesDemo6.out"));
        // 仅在文件存在时删除：Files.deleteIfExists(Path)

        Files.delete(filePath("FilesDemo6.out"));
        // 删除文件：Files.delete(Path)

                StandardCopyOption.ATOMIC_MOVE);
                filePath("FilesDemo5.out"), filePath("FilesDemo6.out"),
        Files.move(
        // 原子移动文件、要么移动完成、要么源文件仍然存在：StandardCopyOption.ATOMIC_MOVE

                StandardCopyOption.COPY_ATTRIBUTES);
                StandardCopyOption.REPLACE_EXISTING,
                filePath("FilesDemo3.out"), filePath("FilesDemo5.out"),
        Files.copy(
        // 拷贝设置（1）覆盖已存在文件StandardCopyOption.REPLACE_EXISTING (2) 拷贝文件属性StandardCopyOption.COPY_ATTRIBUTES

                filePath("FilesDemo4.out"), filePath("FilesDemo5.out"));
        Files.move(
        // 从Path移动到Path：Files.move(Path, Path)

                filePath("FilesDemo3.out"), filePath("FilesDemo4.out"));
        Files.copy(
        // 从Path拷贝到Path: Files.copy(Path, Path)

         */
         * 4. 复制、移动、和删除文件
        /**

        // /var/folders/nb/n2wl0lms2g57q00_t5qd2nsc0000gn/T/fred16143100884822648692
        System.out.println(NEW_LOG_PREFIX + newPath);
        newPath = Files.createTempDirectory("fred");

        // Files.createTempDirectory(     prefix        );
        // Files.createTempDirectory(dir, prefix        );
        // Files.createTempDirectory(     prefix, suffix);
        // Files.createTempDirectory(dir, prefix, suffix);
        // 创建临时目录

        // /var/folders/nb/n2wl0lms2g57q00_t5qd2nsc0000gn/T/14595181751598492480.txt
        System.out.println(NEW_LOG_PREFIX + newPath);
        Path newPath = Files.createTempFile(null, ".txt");

        // Files.createTempFile(     prefix        );
        // Files.createTempFile(dir, prefix        );
        // Files.createTempFile(     prefix, suffix);
        // Files.createTempFile(dir, prefix, suffix);
        // 创建临时文件

        // false
        // false
        System.out.println(NEW_LOG_PREFIX + Files.exists(tmpFile));
        System.out.println(NEW_LOG_PREFIX + Files.exists(tmpDir));
        Files.deleteIfExists(tmpFile);
        Files.deleteIfExists(tmpDir);
        // 删除文件或目录: Files.deleteIfExists(Path)

        // true
        // true
        System.out.println(NEW_LOG_PREFIX + Files.exists(tmpFile));
        System.out.println(NEW_LOG_PREFIX + Files.exists(tmpDir));
        // 检查文件/目录是否存在: Files.exists(Path)

        // /Users/fangkun/Dev/git/java8note/tmp.txt
        System.out.println(NEW_LOG_PREFIX + tmpFile.toAbsolutePath().toString());
        Path tmpFile = Files.createFile(Paths.get("tmp.txt"));
        // 文件已经存在时会抛异常
        // 创建空文件：Files.createFile(Path)

        // /Users/fangkun/Dev/git/java8note/tmp
        System.out.println(NEW_LOG_PREFIX + tmpDir.toAbsolutePath().toString());
        Files.createDirectory(Paths.get("tmp"));
        Path tmpDir = Files.createDirectory(Paths.get("tmp"));
        // 将缺失的上一级目录一起创建（类似shell的mkdir -p)： File.createDirectories(Path)
        // 上一级目录必须存在（类似shell的mkdir）： Files.createDirectory(Path)
        // 创建新的目录: Files.createDirectory(Path)、

         */
         * 创建文件和目录
        /**

        // </head><bod...
        // <title>302 Found</title>
        // <html><head>
        // <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
        System.out.println(NEW_LOG_PREFIX + out.toString("UTF-8").substring(0, 100) + "...");
        Files.copy(filePath("FilesDemo3.out"), out);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        // 从Path拷贝到OutputStream：Files.copy(Path, OutputStream)

        Files.copy(url.openStream(), filePath("FilesDemo3.out"));
        URL url = new URL("http://horstmann.com");
        // 从InputStream拷贝到Path：Files.copy(InputStream, Path)
         */
         *   Writer writer    = Files.newBufferedWriter(path);
         *   Reader reader    = Files.newBufferedReader(path);
         *   OutputStream out = Files.newOutputStream(path);
         *   InputStream in   = Files.newInputStream(path);
         * 2.对于大文件，或二进制文件，可以考虑使用InputStream/OutputStream或者Reader/Writer
        /**

        System.out.println(NEW_LOG_PREFIX + deleted);
        boolean deleted = Files.deleteIfExists(filePath("FilesDemo3.out"));
        // 如果存在则删除文件：Files.deleteIfExists(Path)

        Files.write(filePath("FilesDemo2.out"), lines, StandardOpenOption.APPEND);
        Collections.reverse(lines);
        // 以追加的方式写入：File.write(Path, List<String>, StandardOpenOption.APPEND)

        Files.write(filePath("FilesDemo1.out"), lines);
        Files.write(filePath("FilesDemo1.out"), content.getBytes(StandardCharsets.UTF_8));
        content = content.replaceAll("e", "x");
        // 按行覆盖写入：Files.write(Path, List<String>)
        // 以二进制方式覆盖写入（可指定编码）：Files.write(Path, byte[])

        // Last line: }
        // 输出
        System.out.println(NEW_LOG_PREFIX + "Last line: " + lines.get(lines.size() - 1));
        List<String> lines = Files.readAllLines(filePath("FilesDemo.java"));
        // 按行读取内容

        // import java.n...
        // import java.net.URL;
        // import java.io.IOException;
        // import java.io.ByteArrayOutputStream;
        // 输出
        System.out.println(NEW_LOG_PREFIX + content.substring(0, 100) + "...");
        String content = new String(bytes, StandardCharsets.UTF_8);
        // 将byte[]转换为String（可指定编码）：new String(bytes, Charset)
        byte[] bytes = Files.readAllBytes(filePath("FilesDemo.java"));
        // 读取全部内容：Files.readAllBytes(Path)

         */
         * 1. 对于小文件，可以将文件内容当做字符串或字符串列表来处理
        /*****
    public static void main(String[] args) throws IOException {

    }
        return Paths.get("./code/ch9/sec02/", fileName);
    private static Path filePath(String fileName) {

    private static final String NEW_LOG_PREFIX = "\n\t// ";
public class FilesDemo {

import java.util.List;
import java.util.Collections;
import java.nio.file.*;
import java.nio.charset.StandardCharsets;
import java.net.URL;
import java.io.IOException;
import java.io.ByteArrayOutputStream;
}
    }
        System.out.println(NEW_LOG_PREFIX + isDeleted);
        boolean isDeleted = Files.deleteIfExists(filePath("FilesDemo6.out"));
        // 仅在文件存在时删除：Files.deleteIfExists(Path)

        Files.delete(filePath("FilesDemo6.out"));
        // 删除文件：Files.delete(Path)

                StandardCopyOption.ATOMIC_MOVE);
                filePath("FilesDemo5.out"), filePath("FilesDemo6.out"),
        Files.move(
        // 原子移动文件、要么移动完成、要么源文件仍然存在：StandardCopyOption.ATOMIC_MOVE

                StandardCopyOption.COPY_ATTRIBUTES);
                StandardCopyOption.REPLACE_EXISTING,
                filePath("FilesDemo3.out"), filePath("FilesDemo5.out"),
        Files.copy(
        // 拷贝设置（1）覆盖已存在文件StandardCopyOption.REPLACE_EXISTING (2) 拷贝文件属性StandardCopyOption.COPY_ATTRIBUTES

                filePath("FilesDemo4.out"), filePath("FilesDemo5.out"));
        Files.move(
        // 从Path移动到Path：Files.move(Path, Path)

                filePath("FilesDemo3.out"), filePath("FilesDemo4.out"));
        Files.copy(
        // 从Path拷贝到Path: Files.copy(Path, Path)

         */
         * 4. 复制、移动、和删除文件
        /**

        // /var/folders/nb/n2wl0lms2g57q00_t5qd2nsc0000gn/T/fred16143100884822648692
        System.out.println(NEW_LOG_PREFIX + newPath);
        newPath = Files.createTempDirectory("fred");

        // Files.createTempDirectory(     prefix        );
        // Files.createTempDirectory(dir, prefix        );
        // Files.createTempDirectory(     prefix, suffix);
        // Files.createTempDirectory(dir, prefix, suffix);
        // 创建临时目录

        // /var/folders/nb/n2wl0lms2g57q00_t5qd2nsc0000gn/T/14595181751598492480.txt
        System.out.println(NEW_LOG_PREFIX + newPath);
        Path newPath = Files.createTempFile(null, ".txt");

        // Files.createTempFile(     prefix        );
        // Files.createTempFile(dir, prefix        );
        // Files.createTempFile(     prefix, suffix);
        // Files.createTempFile(dir, prefix, suffix);
        // 创建临时文件

        // false
        // false
        System.out.println(NEW_LOG_PREFIX + Files.exists(tmpFile));
        System.out.println(NEW_LOG_PREFIX + Files.exists(tmpDir));
        Files.deleteIfExists(tmpFile);
        Files.deleteIfExists(tmpDir);
        // 删除文件或目录: Files.deleteIfExists(Path)

        // true
        // true
        System.out.println(NEW_LOG_PREFIX + Files.exists(tmpFile));
        System.out.println(NEW_LOG_PREFIX + Files.exists(tmpDir));
        // 检查文件/目录是否存在: Files.exists(Path)

        // /Users/fangkun/Dev/git/java8note/tmp.txt
        System.out.println(NEW_LOG_PREFIX + tmpFile.toAbsolutePath().toString());
        Path tmpFile = Files.createFile(Paths.get("tmp.txt"));
        // 文件已经存在时会抛异常
        // 创建空文件：Files.createFile(Path)

        // /Users/fangkun/Dev/git/java8note/tmp
        System.out.println(NEW_LOG_PREFIX + tmpDir.toAbsolutePath().toString());
        Files.createDirectories(Paths.get("tmp"));
        Path tmpDir = Files.createDirectory(Paths.get("tmp"));
        // 将缺失的上一级目录一起创建（类似shell的mkdir -p)： File.createDirectories(Path)
        // 上一级目录必须存在，目录已经存在时会抛异常（类似shell的mkdir）： Files.createDirectory(Path)
        // 创建新的目录: Files.createDirectory(Path)、

         */
         * 创建文件和目录
        /**

        // </head><bod...
        // <title>302 Found</title>
        // <html><head>
        // <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
        System.out.println(NEW_LOG_PREFIX + out.toString("UTF-8").substring(0, 100) + "...");
        Files.copy(filePath("FilesDemo3.out"), out);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        // 从Path拷贝到OutputStream：Files.copy(Path, OutputStream)

        Files.copy(url.openStream(), filePath("FilesDemo3.out"));
        URL url = new URL("http://horstmann.com");
        // 从InputStream拷贝到Path：Files.copy(InputStream, Path)
         */
         *   Writer writer    = Files.newBufferedWriter(path);
         *   Reader reader    = Files.newBufferedReader(path);
         *   OutputStream out = Files.newOutputStream(path);
         *   InputStream in   = Files.newInputStream(path);
         * 2.对于大文件，或二进制文件，可以考虑使用InputStream/OutputStream或者Reader/Writer
        /**

        System.out.println(NEW_LOG_PREFIX + deleted);
        boolean deleted = Files.deleteIfExists(filePath("FilesDemo3.out"));
        // 如果存在则删除文件：Files.deleteIfExists(Path)

        Files.write(filePath("FilesDemo2.out"), lines, StandardOpenOption.APPEND);
        Collections.reverse(lines);
        // 以追加的方式写入：File.write(Path, List<String>, StandardOpenOption.APPEND)

        Files.write(filePath("FilesDemo1.out"), lines);
        Files.write(filePath("FilesDemo1.out"), content.getBytes(StandardCharsets.UTF_8));
        content = content.replaceAll("e", "x");
        // 按行覆盖写入：Files.write(Path, List<String>)
        // 以二进制方式覆盖写入（可指定编码）：Files.write(Path, byte[])

        // Last line: }
        // 输出
        System.out.println(NEW_LOG_PREFIX + "Last line: " + lines.get(lines.size() - 1));
        List<String> lines = Files.readAllLines(filePath("FilesDemo.java"));
        // 按行读取内容

        // import java.n...
        // import java.net.URL;
        // import java.io.IOException;
        // import java.io.ByteArrayOutputStream;
        // 输出
        System.out.println(NEW_LOG_PREFIX + content.substring(0, 100) + "...");
        String content = new String(bytes, StandardCharsets.UTF_8);
        // 将byte[]转换为String（可指定编码）：new String(bytes, Charset)
        byte[] bytes = Files.readAllBytes(filePath("FilesDemo.java"));
        // 读取全部内容：Files.readAllBytes(Path)

         */
         * 1. 对于小文件，可以将文件内容当做字符串或字符串列表来处理
        /*****
    public static void main(String[] args) throws IOException {

    }
        return Paths.get("./code/ch9/sec02/", fileName);
    private static Path filePath(String fileName) {

    private static final String NEW_LOG_PREFIX = "\n\t// ";
public class FilesDemo {

import java.util.List;
import java.util.Collections;
import java.nio.file.*;
import java.nio.charset.StandardCharsets;
import java.net.URL;
import java.io.IOException;
import java.io.ByteArrayOutputStream;
